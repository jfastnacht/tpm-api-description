openapi: '3.0.0'
info:
  title: TeamPasswordManager API
  description: >-
    Team Password Manager's RESTful API (Application Programming Interface)
    allows other applications to access some of the resources of the software,
    like projects or passwords.
  termsOfService: 'https://teampasswordmanager.com/docs/eula/'
  contact:
    name: Ferran Barba
    url: https://teampasswordmanager.com/support/
    email: info@teampasswordmanager.com
  license:
    name: proprietary
  version: '4'
servers:
  - url: '{server}{basePath}'
    description: The TeamPasswordManager instance
    variables:
      server:
        default: https://tpm.mydomain.com
      basePath:
        default: /index.php/api/v4
security:
  - basicAuth: []
  - publicKey: []
    requestHash: []
    requestTimestamp: []
paths:
  /version.json:
    get:
      summary: >-
        Returns the version of the software, when it was released and the API
        version used to make the request.
      operationId: getVersion
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: The version information.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/VersionSchema'
  /version/check_latest.json:
    get:
      summary: >-
        Returns the version of the software, when it was released and the API
        version used to make the request.
      operationId: getLatestVersion
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: The version information.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/LatestVersionSchema'
  /passwords.json:
    get:
      summary: >-
        These return the passwords that the user has access to.
      operationId: getPasswordList
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: The password list.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/PasswordListSchema'
    post:
      summary: >-
        Create a new password resource.
      operationId: createPassword
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      requestBody:
        description: The contents of the new password.
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              '$ref': '#/components/schemas/PasswordCreationSchema'
      responses:
        '201':
          description: The ID for the new password.
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  id:
                    type: integer
  /passwords/count.json:
    get:
      summary: >-
        You can manage pagination for password resources using this endpoint, which returns the number of elements and
        pages a resource has.
      operationId: getPasswordCount
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: The password count.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/CountSchema'
  /passwords/page/{page}.json:
    get:
      summary: >-
        These return the passwords per page that the user has access to.
      operationId: getPasswordListByPage
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PageParameter'
      responses:
        '200':
          description: The password list for the specified page.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/PasswordListSchema'
  /passwords/{password_id}.json:
    get:
      summary: >-
        This method returns all the data of a password, identified by its
        internal id.
      operationId: getPassword
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PasswordIdParameter'
        - $ref: '#/components/parameters/UnlockReasonParameter'
      responses:
        '200':
          description: The password.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/PasswordSchema'
    put:
      summary: >-
        Updates a password resource.
      operationId: updatePassword
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PasswordIdParameter'
        - $ref: '#/components/parameters/UnlockReasonParameter'
      requestBody:
        description: The new contents of the password.
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              '$ref': '#/components/schemas/PasswordUpdateSchema'
      responses:
        '204':
          description: Successful response for the updated password.
    delete:
      summary: >-
        Deletes a password.
      operationId: deletePassword
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PasswordIdParameter'
      responses:
        '204':
          description: Successful response for the deleted password.
  /passwords/{password_id}/security.json:
    get:
      summary: >-
        Returns the password security information.
      operationId: getPasswordSecurity
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PasswordIdParameter'
        - $ref: '#/components/parameters/UnlockReasonParameter'
      responses:
        '200':
          description: Response with password security information.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/PasswordSecuritySchema'
    put:
      summary: >-
        Updates the password security information.
      operationId: updatePasswordSecurity
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PasswordIdParameter'
        - $ref: '#/components/parameters/UnlockReasonParameter'
      requestBody:
        description: The new password security of the password.
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              '$ref': '#/components/schemas/PasswordSecurityUpdateSchema'
      responses:
        '204':
          description: Successful response for the updated password security information.
  /passwords/{password_id}/custom_fields.json:
    put:
      summary: >-
        Updates the password security information.
      operationId: updateCustomFields
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PasswordIdParameter'
        - $ref: '#/components/parameters/UnlockReasonParameter'
      requestBody:
        description: The updated custom fields of the password.
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              '$ref': '#/components/schemas/PasswordCustomFieldUpdateSchema'
      responses:
        '204':
          description: Successful response for the updated password custom fields.
  /passwords/{password_id}/lock.json:
    put:
      summary: >-
        Locks the password.
      operationId: lockPassword
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PasswordIdParameter'
      responses:
        '204':
          description: Successful response for the locked password.
  /passwords/{password_id}/unlock.json:
    put:
      summary: >-
        Unlocks the password.
      operationId: unlockPassword
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PasswordIdParameter'
        - $ref: '#/components/parameters/UnlockReasonParameter'
      responses:
        '204':
          description: Successful response for the locked password.
  /passwords/archived.json:
    get:
      summary: >-
        Get a list of archived passwords a user has access to.
      operationId: getArchivedPasswords
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: A list of archived passwords.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/PasswordListSchema'
  /passwords/archived/count.json:
    get:
      summary: >-
        You can manage pagination for archived password resources using this endpoint, which returns the number of
        elements and pages a resource has.
      operationId: getArchivedPasswordCount
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: The archived password count.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/CountSchema'
  /passwords/archived/page/{page}.json:
    get:
      summary: >-
        These return the archived passwords per page that the user has access to.
      operationId: getArchivedPasswordListByPage
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PageParameter'
      responses:
        '200':
          description: The archived password list for the specified page.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/PasswordListSchema'
  /passwords/favorite.json:
    get:
      summary: >-
        Get a list of favorite passwords a user has access to.
      operationId: getFavoritePasswords
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: A list of archived passwords.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/PasswordListSchema'
  /passwords/favorite/count.json:
    get:
      summary: >-
        You can manage pagination for favorite password resources using this endpoint, which returns the number of
        elements and pages a resource has.
      operationId: getFavoritePasswordCount
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: The favorite password count.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/CountSchema'
  /passwords/favorite/page/{page}.json:
    get:
      summary: >-
        These return the favorite passwords per page that the user has access to.
      operationId: getFavoritePasswordListByPage
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PageParameter'
      responses:
        '200':
          description: The favorite password list for the specified page.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/PasswordListSchema'
  /passwords/search/{searchTerm}.json:
    get:
      summary: >-
        Get a list of passwords by search term a user has access to.
      operationId: getPasswordsSearchResults
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/SearchTermParameter'
      responses:
        '200':
          description: A list of passwords found by search term.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/PasswordListSchema'
  /passwords/search/{searchTerm}/count.json:
    get:
      summary: >-
        You can manage pagination for password search result resources using this endpoint, which returns the number of
        elements and pages a resource has.
      operationId: getPasswordSearchResultCount
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/SearchTermParameter'
      responses:
        '200':
          description: The password search result count.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/CountSchema'
  /passwords/search/{searchTerm}/page/{page}.json:
    get:
      summary: >-
        These return the looked up passwords per page that the user has access to.
      operationId: getPasswordSearchResultByPage
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/SearchTermParameter'
        - $ref: '#/components/parameters/PageParameter'
      responses:
        '200':
          description: The looked up password list for the specified page.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/PasswordListSchema'
  /projects.json:
    get:
      summary: >-
        These return the projects that the user has access to. The returned data is the same as in the projects lists
        in the web interface.
      operationId: getProjects
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: The list of projects.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/ProjectListSchema'
    post:
      summary: >-
        Create a new project resource.
      operationId: createProject
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      requestBody:
        description: The contents of the new project.
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              '$ref': '#/components/schemas/ProjectCreationSchema'
      responses:
        '201':
          description: The ID for the new project.
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  id:
                    type: integer
  /projects/count.json:
    get:
      summary: >-
        You can manage pagination for project resources using this endpoint, which returns the number of elements and
        pages a resource has.
      operationId: getProjectCount
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: The project count.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/CountSchema'
  /projects/page/{page}.json:
    get:
      summary: >-
        These return the projects per page that the user has access to.
      operationId: getProjectListByPage
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PageParameter'
      responses:
        '200':
          description: The project list for the specified page.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/ProjectListSchema'
  /projects/{project_id}.json:
    get:
      summary: >-
        This method returns all the data of a project, identified by its
        internal ID.
      operationId: getProject
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/ProjectIdParameter'
      responses:
        '200':
          description: The project.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/ProjectSchema'
    put:
      summary: >-
        Updates a project resource.
      operationId: updateProject
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/ProjectIdParameter'
      requestBody:
        description: The new contents of the project.
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              '$ref': '#/components/schemas/ProjectUpdateSchema'
      responses:
        '204':
          description: Successful response for the updated project.
    delete:
      summary: >-
        Deletes a project.
      operationId: deleteProject
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/ProjectIdParameter'
      responses:
        '204':
          description: Successful response for the deleted project.
  #/projects/{project_id}/passwords.json:
    #get:
  #/projects/{project_id}/passwords/count.json:
    #get:
  #/projects/{project_id}/passwords/page/{page}.json:
    #get:
  #/projects/{project_id}/security.json:
    #get:
    #put:
  /projects/archived.json:
    get:
      summary: >-
        Get a list of archived projects a user has access to.
      operationId: getArchivedProjects
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: A list of archived projects.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/ProjectListSchema'
  /projects/archived/count.json:
    get:
      summary: >-
        You can manage pagination for archived projects resources using this endpoint, which returns the number of
        elements and pages a resource has.
      operationId: getArchivedProjectCount
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: The archived project count.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/CountSchema'
  /projects/archived/page/{page}.json:
    get:
      summary: >-
        These return the archived projects per page that the user has access to.
      operationId: getArchivedProjectListByPage
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PageParameter'
      responses:
        '200':
          description: The archived project list for the specified page.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/ProjectListSchema'
  /projects/favorite.json:
    get:
      summary: >-
        Get a list of favorite projects a user has access to.
      operationId: getFavoriteProjects
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: A list of favorite projects.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/ProjectListSchema'
  /projects/favorite/count.json:
    get:
      summary: >-
        You can manage pagination for favorite project resources using this endpoint, which returns the number of
        elements and pages a resource has.
      operationId: getFavoriteProjectCount
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
      responses:
        '200':
          description: The favorite project count.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/CountSchema'
  /projects/favorite/page/{page}.json:
    get:
      summary: >-
        These return the favorite projects per page that the user has access to.
      operationId: getFavoriteProjectListByPage
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/PageParameter'
      responses:
        '200':
          description: The favorite project list for the specified page.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/ProjectListSchema'
  /projects/search/{searchTerm}.json:
    get:
      summary: >-
        Get a list of projects by search term a user has access to.
      operationId: getProjectsSearchResults
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/SearchTermParameter'
      responses:
        '200':
          description: A list of projects found by search term.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/ProjectListSchema'
  /projects/search/{searchTerm}/count.json:
    get:
      summary: >-
        You can manage pagination for project search result resources using this endpoint, which returns the number of
        elements and pages a resource has.
      operationId: getProjectSearchResultCount
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/SearchTermParameter'
      responses:
        '200':
          description: The project search result count.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/CountSchema'
  /projects/search/{searchTerm}/page/{page}.json:
    get:
      summary: >-
        These return the looked up projects per page that the user has access to.
      operationId: getProjectSearchResultByPage
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/SearchTermParameter'
        - $ref: '#/components/parameters/PageParameter'
      responses:
        '200':
          description: The looked up project list for the specified page.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/ProjectListSchema'
  /projects/{project_id}/subprojects.json:
    get:
      summary: >-
        Get a list of subprojects a user has access to.
      operationId: getSubprojects
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/ProjectIdParameter'
      responses:
        '200':
          description: A list of subprojects.
          content:
            application/json; charset=utf-8:
              schema:
                '$ref': '#/components/schemas/SubprojectListSchema'
  #/projects/{project_id}/subprojects/new_pwd.json:
    #get:
  /projects/{project_id}/change_parent.json:
    put:
      summary: >-
        Change the parent of the specified project.
      operationId: setParentOfProject
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/ProjectIdParameter'
      requestBody:
        description: The new parent of the project.
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              type: object
              properties:
                parent_id:
                  type: integer
              required:
                - parent_id
      responses:
        '204':
          description: Response for a successful change of the parent.
  /projects/{project_id}/archive.json:
    put:
      summary: >-
        Archive the specified project.
      operationId: archiveProject
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/ProjectIdParameter'
      responses:
        '204':
          description: Response for the successful archiving of the project.
  /projects/{project_id}/unarchive.json:
    put:
      summary: >-
        Unarchive the specified project.
      operationId: unarchiveProject
      parameters:
        - $ref: '#/components/parameters/ContentTypeParameter'
        - $ref: '#/components/parameters/ProjectIdParameter'
      responses:
        '204':
          description: Response for the successful unarchiving of the project.
components:
  parameters:
    ContentTypeParameter:
      in: header
      name: Content-Type
      required: true
      schema:
        type: string
        enum:
          - application/json; charset=utf-8
    UnlockReasonParameter:
      in: header
      name: X-Unlock-Reason
      schema:
        type: string
    PasswordIdParameter:
      name: password_id
      in: path
      description: Password ID
      required: true
      schema:
        type: integer
        format: int64
    ProjectIdParameter:
      name: project_id
      in: path
      description: Project ID
      required: true
      schema:
        type: integer
        format: int64
    PageParameter:
      name: page
      in: path
      description: Page number
      required: true
      schema:
        type: integer
        format: int64
    SearchTermParameter:
      name: searchTerm
      in: path
      description: The search term
      required: true
      schema:
        type: string
  schemas:
    VersionSchema:
      properties:
        version:
          type: string
        version_date:
          type: string
        api_version:
          type: string
    LatestVersionSchema:
      allOf:
        - $ref: '#/components/schemas/VersionSchema'
        - properties:
            latest_version:
              type: string
    CountSchema:
      type: object
      properties:
        num_items:
          type: integer
        num_pages:
          type: integer
        num_items_per_page:
          type: integer
    PasswordUpdateSchema:
      type: object
      properties:
        name:
          type: string
        project_id:
          type: integer
        tags:
          type: string
        access_info:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        expiry_date:
          type: string
          pattern: '[0-9]{4}\-[0-9]{2}\-[0-9]{2}'
          nullable: true
        notes:
          type: string
        custom_data1:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_data2:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_data3:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_data4:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_data5:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_data6:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_data7:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_data8:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_data9:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_data10:
          $ref: '#/components/schemas/CustomFieldSchema'
    PasswordCreationSchema:
      allOf:
        - $ref: '#/components/schemas/PasswordUpdateSchema'
        - type: object
          required:
            - name
            - project_id
    PasswordListSchema:
      type: array
      items:
        '$ref': '#/components/schemas/PasswordListItemSchema'
    PasswordListItemSchema:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        project:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        notes_snippet:
          type: string
        tags:
          type: string
        access_info:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        expiry_date:
          type: string
        expiry_status:
          type: integer
        archived:
          type: boolean
        favorite:
          type: boolean
        num_files:
          type: integer
        locked:
          type: boolean
        external_sharing:
          type: boolean
        updated_on:
          type: string
    PasswordSchema:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        project:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        tags:
          type: string
        access_info:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        expiry_date:
          type: string
        expiry_status:
          type: integer
        notes:
          type: string
        custom_field1:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_field2:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_field3:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_field4:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_field5:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_field6:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_field7:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_field8:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_field9:
          $ref: '#/components/schemas/CustomFieldSchema'
        custom_field10:
          $ref: '#/components/schemas/CustomFieldSchema'
        users_permissions:
          type: array
          items:
            $ref: '#/components/schemas/UserPermissionSchema'
        groups_permissions:
          type: array
          items:
            $ref: '#/components/schemas/GroupPermissionSchema'
        parents:
          type: array
          items:
            type: integer
        user_permission:
          type: object
          properties:
            id:
              type: integer
            label:
              type: string
        archived:
          type: boolean
        favorite:
          type: boolean
        num_files:
          type: string
        locked:
          type: boolean
        external_sharing:
          type: boolean
        external_url:
          type: string
        managed_by:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
            email_address:
              type: string
              format: email
            name:
              type: string
            role:
              type: string
        created_on:
          type: string
        created_by:
          $ref: '#/components/schemas/CreatedUpdatedSchema'
        updated_on:
          type: string
        updated_by:
          $ref: '#/components/schemas/CreatedUpdatedSchema'
    PasswordSecuritySchema:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/UserPermissionSchema'
          - properties:
              granted_via:
                type: string
    PasswordSecurityUpdateSchema:
      type: object
      properties:
        managed_by:
          type: integer
        users_permissions:
          $ref: '#/components/schemas/PermissionCombinationSchema'
        group_permissions:
          $ref: '#/components/schemas/PermissionCombinationSchema'
    PasswordCustomFieldUpdateSchema:
      type: object
      properties:
        custom_label1:
          type: string
        custom_type1:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
        custom_label2:
          type: string
        custom_type2:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
        custom_label3:
          type: string
        custom_type3:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
        custom_label4:
          type: string
        custom_type4:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
        custom_label5:
          type: string
        custom_type5:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
        custom_label6:
          type: string
        custom_type6:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
        custom_label7:
          type: string
        custom_type7:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
        custom_label8:
          type: string
        custom_type8:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
        custom_label9:
          type: string
        custom_type9:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
        custom_label10:
          type: string
        custom_type10:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
    PermissionCombinationSchema:
      type: array
      items:
        type: array
        minItems: 2
        maxItems: 2
        items:
          type: integer
    CustomFieldSchema:
      type: object
      properties:
        type:
          type: string
          enum: [cf_text, cf_enc_text, cf_email, cf_pwd, cf_notes, cf_enc_notes]
        label:
          type: string
        data:
          type: string
    UserPermissionSchema:
      type: object
      properties:
        user:
          type: object
          properties:
              id:
                type: integer
              username:
                type: string
              email_address:
                type: string
                format: email
              name:
                type: string
              role:
                type: string
        permission:
          type: object
          properties:
            id:
              type: integer
            label:
              type: string
    GroupPermissionSchema:
      type: object
      properties:
        group:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        permission:
          type: object
          properties:
            id:
              type: integer
            label:
              type: string
    ProjectListSchema:
      type: array
      items:
        $ref: '#/components/schemas/ProjectListItemSchema'
    ProjectListItemSchema:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        tags:
          type: string
        managed_by:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        archived:
          type: boolean
        favorite:
          type: boolean
        num_files:
          type: integer
        updated_on:
          type: string
    ProjectCreationSchema:
      type: object
      properties:
        name:
          type: string
        parent_id:
          type: integer
          default: 0
        tags:
          type: string
        notes:
          type: string
      required:
        - name
        - parent_id
    ProjectUpdateSchema:
      type: object
      properties:
        name:
          type: string
        tags:
          type: string
        notes:
          type: string
    ProjectSchema:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        parent_id:
          type: integer
        tags:
          type: string
        notes:
          type: string
        managed_by:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
            email_address:
              type: string
              format: email
            name:
              type: string
            role:
              type: string
        grant_all_permission:
          type: object
          properties:
            id:
              type: integer
            label:
              type: string
        users_permissions:
          type: array
          items:
            $ref: '#/components/schemas/UserPermissionSchema'
        groups_permissions:
          type: array
          items:
            $ref: '#/components/schemas/GroupPermissionSchema'
        num_passwords:
          type: integer
        num_files:
          type: integer
        user_permission:
          type: object
          properties:
            id:
              type: integer
            label:
              type: string
        user_can_create_password:
          type: boolean
        is_leaf:
          type: boolean
        parents:
          type: array
          items:
            type: integer
        archived:
          type: boolean
        favorite:
          type: boolean
        created_on:
          type: string
        created_by:
          $ref: '#/components/schemas/CreatedUpdatedSchema'
        updated_on:
          type: string
        updated_by:
          $ref: '#/components/schemas/CreatedUpdatedSchema'
    SubprojectListSchema:
      type: array
      items:
        $ref: '#/components/schemas/SubprojectListItemSchema'
    SubprojectListItemSchema:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        has_children:
          type: boolean
        archived:
          type: boolean
        favorite:
          type: boolean
        disabled:
          type: boolean
        num_pwds:
          type: integer
        num_pwds_branch:
          type: integer
    CreatedUpdatedSchema:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email_address:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    publicKey:
      type: apiKey
      in: header
      name: X-Public-Key
    requestHash:
      type: apiKey
      in: header
      name: X-Request-Hash
    requestTimestamp:
      type: apiKey
      in: header
      name: X-Request-Timestamp